{"name":"Exgrip.winrt.appbarcontrols","tagline":"Split button for Windows 8.1 to be used with AppBars (Top) appbar similar to the Microsoft Weather app","body":"ExGrip.WinRT.AppBarControls\r\n===========================\r\n\r\nSpliButton for Windows 8.1 to be used with AppBars (Top) appbar similar to the Microsoft Weather app\r\n\r\n![splitbuttonsample](https://cloud.githubusercontent.com/assets/1821384/4431832/f888855c-467a-11e4-942d-d096baa3cfec.png)\r\n\r\n\r\nProperties that directly influence the visual apperance of the control\r\n======================================================================\r\n\r\n\r\n\r\n![mainproperties](https://cloud.githubusercontent.com/assets/1821384/4431914/1dd0f59e-467e-11e4-93d0-373633bd19ee.png)\r\n\r\n\r\nProperties that influence the behaviour of the control\r\n======================================================================\r\n\r\n*ToggleOnParentFocusChange (bool)*\r\n\r\nWhen selected (true), updates the  \"RightToggle\" property after the parent (for example the AppBar) looses focus. You can bind the Visibility property (using a converter boolean2visibiliy) of any FrameworkElement to hide/show it after the parent element looses focus. In the sample the third SplitButton is using this property (set to true) to show a StackPanel when the toggle-button is pressed. When the app-bar looses focus, the StackPanel disappears as well, and the toggle-button is reset to its initial state (arrow-down).\r\n\r\nThe second button has set the ToggleOnParentChange propery de-selected (false). Therefore the Button that appears when you hit it's toggle-button will stay there (even when the app-bar is not visible) and the toggle-button will be shown in it's last position (arrow-up, or arrow-down). This allows you to keep the elements to be shown in a visible state.\r\n\r\n\r\n![toggleonfocuschange](https://cloud.githubusercontent.com/assets/1821384/4432000/524efcfa-4681-11e4-8a97-1bd467862004.png)\r\n\r\n\r\nEvents and Binding using MVVM\r\n=============================\r\n\r\nYou can work with the control using  standard events (for code-behind) or commands for MVVM.\r\n\r\n*Commands*\r\n\r\n* LeftAreaMouseDownCommand and LeftAreaMouseDownCOmmandParameter (when the user clicks on the left button)\r\n* ToggleButtonClickedCommand and ToggleButtonClickedCommandParameter (when the user clicks the toggle-button)\r\n\r\n*Events*\r\n\r\n* LeftAreaButtonClicked (when the user clicks on the left button)\r\n* ToggleAreaButtonClicked (when the user clicks the toggle button)\r\n\r\n\r\nVisual States\r\n=============\r\nThe SplitButton has the following VisualStates that can be used for customizations:\r\n\r\n*Visiual-State-Group \"RightAreaStates\"*\r\n\r\n* RightAreaNormal - state for the toggle-button in \"normal\" state\r\n* RightAreaHover - the \"mouser-over\" state\r\n* RightAreaHoverOut - the \"mouse-out\" state\r\n* RightAreaMouseDown - the \"clicked\" state\r\n* RightAreaMouseUp - the state when your finger leaves the left mouse button\r\n* ReightToggle - the \"toggle-button toggle\" state\r\n* RightHoverToggle - the \"mouse-over\" when in toggle mode\r\n\r\n*Visual-State-Group \"LeftAreaStates\"*\r\n\r\n* LeftAreaNormal - the button is in an \"untouched\" state\r\n* LeftAreaHover  - the \"mouse-over\" state\r\n* LeftAreaHoverOut - the \"mouse-out\" state\r\n* LeftAreaMouseDown - the \"clicked\" state\r\n* LeftAreaMouseUp - the state when your finger leaves the left mouse button\r\n\r\nYou can open the sample project in Expression Blend for VS 2013 and edit the \"Default\" style that you can find in Main.xaml (within the Page-Resources).\r\n\r\n\r\nHelper\r\n=================\r\n\r\n> [Helper for online usage](http://htmlpreview.github.io/?https://github.com/Injac/ExGrip.WinRT.AppBarControls/blob/master/Helper/WebSite/Index.html)\r\n\r\n\r\n> [Helper for offline usage](https://github.com/Injac/ExGrip.WinRT.AppBarControls/raw/master/Helper/AppBarCustomization.chm)\r\n\r\n\r\nHow to contribute\r\n=================\r\n\r\nThere is a *dev-branch* that was setup especially for contributions, to merge any additions in the future with the master-branch. Please use this branch to issue your pull-requests.\r\n\r\nTO-DO'S\r\n======\r\n* Setup Wiki\r\n* Enhance Documentation \r\n* Code Reviews\r\n* Setup Nuget-Packaging \r\n* Re-work solution structure\r\n\r\nLICENSE\r\n=======\r\n\r\n*The MIT License (MIT)*\r\n\r\nCopyright (c) <year> <copyright holders>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}